digraph G {

// description des classes
node [shape="cylinder" color="blue"]
"postes d un planning \n pk: INTEGER NOT NULL PRIMARY KEY \n horod_debut: DateTime \n horod_fin : Datetime \n type_poste : ENUM \n categorie : ENUM"
"classe fp: INTEGER pk not null primary_key \n INTEGER annee \n INTEGER mois \n INTEGER nb_paniers \n INTEGER hsup_25_aubry \n INTEGER INDEMNITECP \n INTEGER hsup_25_annu_domo  \n INTEGER heures_nuit_hors_dim_et_dimjour10 \n INTEGER heures_dim20"
        "tbl interm \n INTEGER not null primary key \n INTEGER fk_sce references(Source.pk) \n INTEGER fk_dest refences(Postes.pk)"
        "table hsup \n INTEGER not null primary key \n INTEGER mois \n integer ANNEE \n INTEGER DU_25 \n INTEGER PAYE_25 \n INTEGER DIFF_25 \n INTEGER DU_50 \n INTEGER PAYE_50 \n INTEGER DIFF_50 \n INTEGER EQV_HTRAV_SOMMEDIFF"
        "table hmoishsupdues \n   INTEGER  not null primary key \n INTEGER mois \n  INTEGER annee \n INTEGER DU_25 \n  INTEGER DU_50 \n "
        "table hsemhsupdues \n INTEGER not null primary kie \n INTEGER not null mois_fin_sem \n INTEGER not null annee_fin_sem \n INTEGER DU_25 \n INTEGER DU_50 "
                "table jourtrav \n INTEGER not null primary key \n DATETIME debut_poste \n DATETIME fin_poste \n  DATE jour_trav \n INTEGER num_sem_iso(jour_trav) \n  INTEGER num_annee_iso(jour_trav) "
        "table hsemtrav \n INTEGER annee_cal(fin_sem) \n  INTEGER  mois_cal(fin_sem) \n INTEGER nb_heures \n INTEGER num_sem_iso \n INTEGER num_annee_iso"

// notes pour conception description des classe
node [shape="note" color="blue"]

    "sce fp doit comporter nb paniers"
        "classe fp doit comporter nb paniers"

        "sce orig documentaire doit comporter pk\n pour plug optionnel \n Postes"
        "Postes doit comporter pk \n pour plug optionnel sceDocumentaire"

        "table jourtrav \n doit comporter \n num_sem_iso et num_annee_iso \n afin permettre regrouppement sur ce critère \n pour produire hsemtrav "

        // les entrees
node [shape="larrow" color="red"]
    "source texte \n liste jours fériés"
    "source fich Postes"
    "source fich sabattique"
    "source fich paye"
    "source origine documentaire"
// les sorties
node [shape = "rarrow" color="green"]
"class HeuresSupplementairesDuesEffectueesDifference(Base)"
"class HeuresNuitSemaineDimancheJourDuesEffectueesDifference(Base)"
"HeuresDimancheNuitEffectueesPayeesDifference(Base)"
"HeuresJoursFerieDuesEffectueesDifference(Base)"
"class ChevauchementCP(Base)"
"class VolumeHoraireANnuelVolumeAnnuel39HeuresDifference(Base)"
"class AnomaliePlusDe48(Base)"
"class AnomaliePlusDe48SemaineGlissante(Base)"
"class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
"class  AnomalieCongesImposesPendantPeriodeSabattique(Base)"
"class PaniersDusPaniersPayesDifference"
// les tables intermediaires
node [shape="box" color="black"]
// liste des classes pour n en oublier aucune
"class sourceDocumentaire"
 "class Postes(Base):"
"Class PaniersDus(Base)"
"class JoursTravailles(Base)"
"class FichePaye(Base)"
"class ExclureSabatique(Base)"


//TACHE "class HeuresSupplementairesDuesEffectueesDifference(Base)"
// mois annee de fiche de paye. du = heures travaillees au delà de 35 heures -> split de ces heures en entre 35 et 43 entre 43 et 48 plus de 48.
//                              paye = heures aubry 17.33 heures à 25 %   -  4 heures par semaine de cp (1 semaine = 5/5. 1 jour = 1/5 etc.... ) -> payé 25%
//                              paye = heurs annuelles (2 heures en mai 2017 foutage de g... ) => nécessité dans fiche de paye
  // constructin de jourstravailles depuis postes
"class Postes(Base):" -> "class JoursTravailles(Base)" [label = "split de donnees: 1 ligne \n en donne \n 1 ou 2 \n trigger"]
   // modelisatino de jourstravailles
        "table jourtrav \n doit comporter \n num_sem_iso et num_annee_iso \n afin permettre regrouppement sur ce critère \n pour produire hsemtrav " -> "class JoursTravailles(Base)"
        "table jourtrav \n INTEGER not null primary key \n DATETIME debut_poste \n DATETIME fin_poste \n  DATE jour_trav \n INTEGER num_sem_iso(jour_trav) \n  INTEGER num_annee_iso(jour_trav) " -> "class JoursTravailles(Base)"
        // comment remplir jours travailles?
 "class JoursTravailles(Base)" -> "necessite trigger"
 "necessite trigger" -> {"trigger sqlite raw sql" "ddl orm" "evt orm"  }
  // construction de semaines travaillees depuis jourstravailles
  "class JoursTravailles(Base)" -> "class SemainesTravaillees(Base)" [label = "agregat via vue \n sum(fin période - début periode) \n group by (sem_iso, annee_iso)"]
   // modélisation semaine travaillees
   "table hsemtrav \n INTEGER annee_cal(fin_sem) \n  INTEGER  mois_cal(fin_sem) \n INTEGER nb_heures \n INTEGER num_sem_iso \n INTEGER num_annee_iso" -> "class SemainesTravaillees(Base)"
  "class SemainesTravaillees(Base)" ->  "class calculSemaineHeuresSupDues"
"class calculSemaineHeuresSupDues"  -> "class calculMoisHeuresSupDues"
   // du mois heures sup au heures sup diff
"class calculMoisHeuresSupDues"-> "class HeuresSupplementairesDuesEffectueesDifference(Base)"
"table hmoishsupdues \n   INTEGER  not null primary key \n INTEGER mois \n  INTEGER annee \n INTEGER DU_25 \n  INTEGER DU_50 \n " -> "class calculMoisHeuresSupDues"
  //  heures sup payees 47 * 4 = 188 heures annuelles (le reste = 20 h ds cp):  soit 17,33 tt le temps sauf cp soit 4h en moins  par semaine (reel).  ou 4h / semaine sauf semaines cp.
  // 4h par semaine à 25% fonctionne donc. exclure semaines de cp.
  // du coup :

  // TODO : pb semaines de cp incompletes : retirer 4 h x n/5 x nb_jr_cp
"class FichePaye(Base)"   ->  "class HeuresSupPayees"
"class CP" -> "class HeuresSupPayees" [label = "exclure semaines cp"]
"class HeuresSupPayees" -> "class HeuresSupplementairesDuesEffectueesDifference(Base)" [label = "jointure entre: \n mois de fp \n vaut  mois de fin de semaineiso \n ET  annee_fp vaut \n annee fin semaine_iso" ]
"table hsup \n INTEGER not null primary key \n INTEGER mois \n integer ANNEE \n INTEGER DU_25 \n INTEGER PAYE_25 \n INTEGER DIFF_25 \n INTEGER DU_50 \n INTEGER PAYE_50 \n INTEGER DIFF_50 \n INTEGER EQV_HTRAV_SOMMEDIFF" -> "class HeuresSupplementairesDuesEffectueesDifference(Base)"
"table hsemhsupdues \n INTEGER not null primary kie \n INTEGER not null mois_fin_sem \n INTEGER not null annee_fin_sem \n INTEGER DU_25 \n INTEGER DU_50 " -> "class calculSemaineHeuresSupDues"
// FIN TACHE






// TACHE class HeuresNuitSemaineDimancheJourDuesEffectueesDifference(Base)"
"class JoursTravailles(Base)"   -> "class HeuresJoursNuitTravaillees(Base)"  [label = "split de donnees: 1 ligne \n en donne \n 1 ou 2 \n trigger"]
"class HeuresJoursNuitTravaillees(Base)" -> { "class HeuresNuitSemaineDimancheJourDuesEffectueesDifference(Base)" "HeuresDimancheNuitEffectueesPayeesDifference(Base)" }
// FIN TACHE

// TACHE "HeuresDimancheNuitEffectueesPayeesDifference(Base)"
// FIN TACHE

// TACHE "HeuresJoursFerieDuesEffectueesDifference(Base)"
// FIN TACHE

// TACHE "class ChevauchementCP(Base)"
 "class Postes(Base):" -> "class CP"
 "class CP" -> "class ChevauchementCP(Base)"
 "class JoursTravailles(Base)" -> "class ChevauchementCP(Base)"
// FIN TACHE

// TACHE "class VolumeHoraireANnuelVolumeAnnuel39HeuresDifference(Base)"
// FIN TACHE


// TACHE "class AnomaliePlusDe48(Base)"
// FIN TACHE

// TACHE "class AnomaliePlusDe48SemaineGlissante(Base)"
// FIN TACHE

// TACHE "class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
// TACHE NOMBRE DE WE RESPECT VIE PRIVEE
"class JoursTravailles(Base)" -> "class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
"calcul ListeDimanchesAnnuels" -> "class ListeDimanchesTrimestre"
"class CP" -> "class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
"class ListeDimanchesTrimestre" -> "class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
"class JoursTravailles(Base)" -> "class AnomalieRespectViePriveeDimanchesTotauxtrimCPHorsCpMoitiesupFourniesDifference(Base)"
// FIN TACHE NOMBRE DE WE RESPECT VIE PRIMVEE
// FIN TACHE

// TACHE "class  AnomalieCongesImposesPendantPeriodeSabattique(Base)"
// FIN TACHE

// TACHE "class PaniersDusPaniersPayesDifference"
 // TACHE VERIFICATION DES PANIERS PAYES = PANIERS DUS
 "class Postes(Base):" -> "Class PaniersDus(Base)" [label = "agregat via vue \n count(Postes) \n group by \n mois(Postes.debut), \n annee(Postes.debut)"]
 "Class PaniersDus(Base)" -> "create view as select..." [label = "necessite vues ds slqalch" ]
     "sce fp doit comporter nb paniers" -> "source fich paye"
        "classe fp doit comporter nb paniers" -> "class FichePaye(Base)"
        "class FichePaye(Base)" -> "class PaniersPayes"
        "class PaniersPayes" -> "class PaniersDusPaniersPayesDifference"
        "class ExclureSabattique" -> "Class PaniersDus(Base)"
        "Class PaniersDus(Base)" -> "class PaniersDusPaniersPayesDifference"
 // FIN DE TACHE VERIFICATION PANIERS PAYES = PANIERS DUS
// FIN TACHE

//  carte grille cornouialle clef boitier lecture ticket  ds 06 60 82 97 41  m  corecter

// TACHE CONSTRUCTION DU PLANNING
"source fich Postes" -> "class Postes(Base):"
"postes d un planning \n pk: INTEGER NOT NULL PRIMARY KEY \n horod_debut: DateTime \n horod_fin : Datetime \n type_poste : ENUM \n categorie : ENUM" -> "class Postes(Base):"
"source origine documentaire" -> "class sourceDocumentaire"
"class sourceDocumentaire" -> "tbl interm"
"tbl interm" -> "class Postes(Base):"
"sce orig documentaire doit comporter pk\n pour plug optionnel \n Postes"  -> "class sourceDocumentaire"
"Postes doit comporter pk \n pour plug optionnel sceDocumentaire" -> "class Postes(Base):"
"tbl interm \n INTEGER not null primary key \n INTEGER fk_sce references(Source.pk) \n INTEGER fk_dest refences(Postes.pk)" -> "tbl interm"
// FIN TACHE CONSTRUCTION DU PLANNING

// TACHE CONSTRUCTION FICHE PAYE
"classe fp: INTEGER pk not null primary_key \n INTEGER annee \n INTEGER mois \n INTEGER nb_paniers \n INTEGER hsup_25_aubry \n INTEGER INDEMNITECP \n INTEGER hsup_25_annu_domo  \n INTEGER heures_nuit_hors_dim_et_dimjour10 \n INTEGER heures_dim20" -> "class FichePaye(Base)"
 "source fich paye" -> "class FichePaye(Base)" [label = "insert(choose)" ]
// FIN TACHE

// TACHE VOLUME HORAIRE ANNUEL 39 HEURES
 // SOUS TACHE exclure sabattique des heures à effectuer annuellement.
 "class ExclureSabatique(Base)" -> "class VolumeHoraireANnuelVolumeAnnuel39HeuresDifference(Base)"
 // FIN DE TACHE VOLUME HORAIRE ANNUEL 39 HEURES


 // TACHE sabattique : relever les cp imposés lors période sabattique
 "source fich sabattique" -> "class ExclureSabatique(Base)"
 "class ExclureSabatique(Base)" -> "class  AnomalieCongesImposesPendantPeriodeSabattique(Base)"
 "class CP" -> "class  AnomalieCongesImposesPendantPeriodeSabattique(Base)"
 // fin tache









"class SemainesTravaillees(Base)"



"class SemainesTravaillees(Base)" -> "class AnomaliePlusDe48(Base)"
"class JoursTravailles(Base)" -> "class AnomaliePlusDe48SemaineGlissante(Base)" [label = "algo à déterminer"]
"source texte \n liste jours fériés" -> "HeuresJoursFerieDuesEffectueesDifference(Base)"
"class JoursTravailles(Base)" -> "HeuresJoursFerieDuesEffectueesDifference(Base)"

}